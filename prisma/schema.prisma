// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           Int              @id @default(autoincrement())
  itemId       String           @unique
  name         String
  category     String
  fullPrice    Float
  price        Float
  screen       String?
  capacity     String?
  color        String?
  ram          String?
  year         Int?
  image        String
  details      ProductDetails[]
  OrderProduct OrderProduct[]
  CartProducts  CartProducts[]
}

model ProductDetails {
  id                String   @id
  namespaceId       String
  category          String
  name              String
  capacityAvailable String[]
  capacity          String
  priceRegular      Float
  priceDiscount     Float
  colorsAvailable   String[]
  color             String
  images            String[]
  description       Json
  screen            String
  resolution        String
  processor         String
  ram               String
  camera            String?
  zoom              String?
  cell              String[]
  Product           Product  @relation(fields: [id], references: [itemId])
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  name            String?
  password        String
  activationToken String         @unique
  orders          Order[]
  refreshTokens   RefreshToken[]
  favourites      String[]
  Cart            Cart[]
}

model Order {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    Int
  user      User           @relation(fields: [userId], references: [id])
  products  OrderProduct[]
}

model OrderProduct {
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  CartProducts  CartProducts[]
}

model CartProducts {
  cartId   Int
  productId Int
  quantity  Int
  cart     Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@id([cartId, productId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "idx_user_id")
}
